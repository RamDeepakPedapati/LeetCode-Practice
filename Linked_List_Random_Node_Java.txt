/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    /** @param head The linked list's head.
        Note that the head is guaranteed to be not null, so it contains at least one node. */
    private ArrayList<Integer> range=new ArrayList<>();
    Random random=null;
    public Solution(ListNode head) {
        while(head!=null)
        {
            this.range.add(head.val);
            head=head.next;
            random=new Random();
        }
    }
    
    /** Returns a random node's value. */
    public int getRandom() {
        int pick= random.nextInt(this.range.size());
        return this.range.get(pick);
        // return this.range.get((int)Math.random()%(this.range.size()));
    }
}

/**
 * Your Solution object will be instantiated and called as such:
 * Solution obj = new Solution(head);
 * int param_1 = obj.getRandom();
 */